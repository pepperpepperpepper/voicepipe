#!/usr/bin/env python3
"""Fast voicepipe control with optimal transcription handling"""
import sys
import socket
import json
import os
import subprocess
import time
import fcntl
from pathlib import Path

SOCKET_PATH = Path(os.environ.get('XDG_RUNTIME_DIR', '/tmp')) / 'voicepipe.sock'
DEBOUNCE_FILE = '/tmp/voicepipe/voicepipe-fast.time'
DEBOUNCE_MS = 500  # milliseconds
LOCK_FILE = '/tmp/voicepipe/voicepipe-fast.lock'

TRANSCRIBER_SOCKET = Path('/tmp/voicepipe/voicepipe_transcriber.sock')

def send_cmd(cmd):
    """Send command to daemon via Unix socket"""
    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    client.settimeout(0.5)  # Fast timeout
    
    try:
        client.connect(str(SOCKET_PATH))
        client.sendall(json.dumps({"command": cmd}).encode())
        
        # Read response efficiently
        response_data = b""
        while True:
            part = client.recv(4096)
            if not part:
                break
            response_data += part
            # Quick check for complete JSON
            if response_data.endswith(b'}'):
                try:
                    json.loads(response_data)
                    break
                except:
                    continue
        
        return json.loads(response_data.decode())
    finally:
        client.close()

def send_transcribe_request(audio_file):
    """Send audio file to transcriber daemon and stream results."""
    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    client.settimeout(60.0)  # Increased timeout
    try:
        client.connect(str(TRANSCRIBER_SOCKET))
        client.send((json.dumps({"audio_file": audio_file}) + '\n').encode())
        
        buffer = ""
        full_text = ""
        while True:
            try:
                chunk = client.recv(4096).decode()
                if not chunk:
                    break
            except socket.timeout:
                print("[TRANSCRIBE] Warning: Read timeout, continuing...", file=sys.stderr)
                continue
            
            buffer += chunk
            while '\n' in buffer:
                line, buffer = buffer.split('\n', 1)
                if line.strip():
                    try:
                        response = json.loads(line)
                        if response.get('type') == 'transcription':
                            text = response.get('text', '')
                            if text:
                                full_text += text
                        elif response.get('type') == 'complete':
                            return full_text
                        elif response.get('type') == 'error':
                            print(f"[TRANSCRIBE] Error: {response.get('message')}", file=sys.stderr)
                            return ''
                    except json.JSONDecodeError:
                        continue
        return full_text
    except Exception as e:
        print(f"[TRANSCRIBE] Error: {e}", file=sys.stderr)
        return ''
    finally:
        client.close()

class FileLock:
    """Simple file-based lock using fcntl"""
    def __init__(self, lockfile):
        self.lockfile = lockfile
        self.fd = None
        
    def __enter__(self):
        self.fd = open(self.lockfile, 'w')
        try:
            # Try to acquire exclusive lock (non-blocking)
            fcntl.flock(self.fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            return self
        except IOError:
            # Lock is held by another process
            self.fd.close()
            self.fd = None
            raise
            
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.fd:
            fcntl.flock(self.fd, fcntl.LOCK_UN)
            self.fd.close()

def check_debounce():
    """Check if enough time has passed since last invocation"""
    try:
        current_time = int(time.time() * 1000)  # milliseconds
        
        # Try to read last time
        if os.path.exists(DEBOUNCE_FILE):
            with open(DEBOUNCE_FILE, 'r') as f:
                last_time = int(f.read().strip())
                
            if current_time - last_time < DEBOUNCE_MS:
                print(f"[DEBOUNCE] Skipping - last: {last_time}, current: {current_time}, diff: {current_time - last_time}ms", file=sys.stderr)
                return False  # Too soon, ignore
        
        # Write current time
        with open(DEBOUNCE_FILE, 'w') as f:
            f.write(str(current_time))
        
        print(f"[DEBOUNCE] Allowing - current: {current_time}", file=sys.stderr)
        return True
    except Exception as e:
        print(f"[DEBOUNCE] Error: {e}, allowing action", file=sys.stderr)
        return True

def execute_toggle():
    """Execute toggle command logic"""
    try:
        print(f"[TOGGLE] Starting toggle execution", file=sys.stderr)
        status = send_cmd("status")
        print(f"[TOGGLE] Status: {status}", file=sys.stderr)
        
        if status.get('status') == 'recording':
            print("[TOGGLE] Recording active, stopping...", file=sys.stderr)
            # Stop and transcribe
            result = send_cmd("stop")
            print(f"[TOGGLE] Stop result: {result}", file=sys.stderr)
            
            if 'error' not in result and 'audio_file' in result:
                audio_file = result['audio_file']
                print(f"[TOGGLE] Audio file: {audio_file}", file=sys.stderr)
                
                text = send_transcribe_request(audio_file)
                if text:
                    cleaned_text = text.rstrip()  # Remove any final trailing whitespace/newlines
                    print(f"[TOGGLE] Transcription: {cleaned_text}", file=sys.stderr)
                    # Auto-detect display server for typing
                    if os.environ.get('WAYLAND_DISPLAY'):
                        subprocess.run(['wtype', cleaned_text], capture_output=True, check=False)
                    elif os.environ.get('DISPLAY'):
                        subprocess.run(['xdotool', 'type', '--', cleaned_text], capture_output=True, check=False)
                    else:
                        print("[TOGGLE] No display server detected, cannot type text", file=sys.stderr)
                else:
                    print("[TOGGLE] No transcription returned", file=sys.stderr)
                
                # Clean up
                if os.path.exists(audio_file):
                    os.unlink(audio_file)
                    print(f"[TOGGLE] Cleaned up audio file: {audio_file}", file=sys.stderr)
            else:
                print(f"[TOGGLE] Stop error: {result.get('error', 'Unknown error')}", file=sys.stderr)
        else:
            print("[TOGGLE] Starting recording...", file=sys.stderr)
            # Start recording
            result = send_cmd("start")
            print(f"[TOGGLE] Start result: {result}", file=sys.stderr)
            if 'error' in result:
                print(f"[TOGGLE] Start error: {result['error']}", file=sys.stderr)
    except socket.error as e:
        print(f"[TOGGLE] Socket error: {e}", file=sys.stderr)
        print("Error: Cannot connect to voicepipe daemon. Is it running?", file=sys.stderr)
        print("Start it with: systemctl --user start voicepipe-recorder.service", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"[TOGGLE] Unexpected error: {e}", file=sys.stderr)
        raise

def main():
    if len(sys.argv) < 2:
        print("Usage: voicepipe-fast [start|stop|toggle]")
        sys.exit(1)
    
    cmd = sys.argv[1]
    
    # For toggle command, use file locking to prevent concurrent execution
    if cmd == "toggle":
        try:
            print(f"[MAIN] Toggle command received", file=sys.stderr)
            with FileLock(LOCK_FILE):
                print(f"[MAIN] Lock acquired", file=sys.stderr)
                # Also check debounce inside the lock to prevent rapid toggles
                if not check_debounce():
                    print("[MAIN] Debounced, exiting", file=sys.stderr)
                    sys.exit(0)  # Exit silently if debounced
                print("[MAIN] Executing toggle", file=sys.stderr)
                execute_toggle()
                print("[MAIN] Toggle completed", file=sys.stderr)
                return
        except IOError:
            print("[MAIN] Lock already held, exiting", file=sys.stderr)
            # Another instance is running, exit silently
            sys.exit(0)
    
    try:
        if cmd == "start":
            status = send_cmd("status")
            if status.get('status') == 'recording':
                sys.exit(0)  # Already recording, exit silently
            
            result = send_cmd("start")
            if 'error' in result:
                print(f"Error: {result['error']}", file=sys.stderr)
                sys.exit(1)
                
        elif cmd == "stop":
            status = send_cmd("status")
            if status.get('status') != 'recording':
                sys.exit(0)  # Not recording, exit silently
                
            result = send_cmd("stop")
            if 'error' not in result and 'audio_file' in result:
                audio_file = result['audio_file']
                if os.path.exists(audio_file) and os.path.getsize(audio_file) > 0:
                    text = send_transcribe_request(audio_file)
                    # Output text
                    if text:
                        print(text)
                    # Clean up
                    if os.path.exists(audio_file):
                        os.unlink(audio_file)
            else:
                if 'error' in result:
                    print(f"Error: {result['error']}", file=sys.stderr)
                    
    except socket.error:
        print("Error: Cannot connect to voicepipe daemon. Is it running?", file=sys.stderr)
        print("Start it with: systemctl --user start voicepipe-recorder.service", file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        # Handle Ctrl+C gracefully
        sys.exit(130)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()