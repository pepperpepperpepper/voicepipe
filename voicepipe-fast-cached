#!/usr/bin/env python3
"""Fast voicepipe control with pre-initialized transcriber"""
import sys
import socket
import json
import os

SOCKET_PATH = '/tmp/voicepipe.sock'

# Pre-initialize the transcriber globally
_transcriber = None

def get_transcriber():
    """Get or create a cached transcriber instance"""
    global _transcriber
    if _transcriber is None:
        from voicepipe.transcriber import WhisperTranscriber
        _transcriber = WhisperTranscriber(model='gpt-4o-transcribe')
    return _transcriber

def send_cmd(cmd):
    """Send command to daemon via Unix socket"""
    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    client.connect(SOCKET_PATH)
    
    client.sendall(json.dumps({"command": cmd}).encode())
    
    # Read response
    response_data = b""
    while True:
        part = client.recv(4096)
        if not part:
            break
        response_data += part
        if response_data.endswith(b'}'):
            try:
                json.loads(response_data.decode())
                break
            except:
                continue
    
    client.close()
    return json.loads(response_data.decode())

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: voicepipe-fast-cached [start|stop|status|toggle]")
        sys.exit(1)
    
    cmd = sys.argv[1]
    
    # Pre-warm the transcriber for stop/toggle commands
    if cmd in ["stop", "toggle"]:
        # Check if we're actually recording first to avoid unnecessary init
        try:
            status = send_cmd("status")
            if status.get('status') == 'recording':
                # Pre-initialize while user is still speaking
                get_transcriber()
        except:
            pass
    
    try:
        if cmd == "start":
            # Check if already recording
            status = send_cmd("status")
            if status.get('status') == 'recording':
                print("Already recording")
                sys.exit(0)
            
            result = send_cmd("start")
            if 'error' not in result:
                print("Recording started")
            else:
                print(f"Error: {result['error']}")
                
        elif cmd == "stop":
            # Check if actually recording
            status = send_cmd("status")
            if status.get('status') != 'recording':
                print("Not recording")
                sys.exit(0)
                
            result = send_cmd("stop")
            if 'error' not in result:
                print("Recording stopped")
                if 'audio_file' in result:
                    # Use cached transcriber
                    transcriber = get_transcriber()
                    text = transcriber.transcribe(result['audio_file'])
                    print(text)
                    # Clean up audio file
                    if os.path.exists(result['audio_file']):
                        os.unlink(result['audio_file'])
            else:
                print(f"Error: {result['error']}")
                
        elif cmd == "toggle":
            # Get current status and toggle
            status = send_cmd("status")
            if status.get('status') == 'recording':
                # Currently recording, stop it
                result = send_cmd("stop")
                if 'error' not in result and 'audio_file' in result:
                    # Use cached transcriber
                    transcriber = get_transcriber()
                    text = transcriber.transcribe(result['audio_file'])
                    if text:
                        # Type using xdotool
                        import subprocess
                        subprocess.run(['xdotool', 'type', '--', text], 
                                     capture_output=True, text=True)
                    # Clean up
                    if os.path.exists(result['audio_file']):
                        os.unlink(result['audio_file'])
            else:
                # Not recording, start it
                result = send_cmd("start")
                if 'error' not in result:
                    print("Recording started")
                    
        elif cmd == "status":
            result = send_cmd("status")
            if result.get('status') == 'recording':
                print("Recording")
            else:
                print("Not recording")
                
        else:
            print(f"Unknown command: {cmd}")
            sys.exit(1)
            
    except socket.error as e:
        print(f"Error: Cannot connect to daemon. Is it running?")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)